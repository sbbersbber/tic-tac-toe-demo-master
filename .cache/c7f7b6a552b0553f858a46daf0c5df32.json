{"dependencies":[{"name":"lodash/fp/sample","loc":{"line":8,"column":19}},{"name":"dot","loc":{"line":9,"column":20}}],"generated":{"js":"\"use strict\";\n\nvar _sample = require(\"lodash/fp/sample\");\n\nvar _sample2 = _interopRequireDefault(_sample);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst doT = require('dot');\n\n// constant\n/*\r\n* @Author: huangteng\r\n* @Date:   2018-04-18 10:51:06\r\n* @Last Modified by:   huangteng\r\n* @Last Modified time: 2018-04-20 17:38:40\r\n* @Description: 'Tic-Tac-Toe'\r\n*/\nconst role = ['x', 'o'];\nconst all = ['x', 'o', 'e'];\nconst cache = {};\n\n// mock data\nconst defaultAnswer = ({ count = 3, answer = '[2,2], [1,2], [2,0]', err = '', role = 'x' } = {}) => ({\n  count,\n  answer,\n  err,\n  role\n});\nlet defaultChessBoardData = [['x', 'o', 'o'], ['x', 'x', 'e'], ['e', 'o', 'e']];\n\n// render methods\nconst render = mountElementId => tmplElementId => data => {\n  let temp = doT.template(document.querySelector(`${tmplElementId}`).text);\n  document.querySelector(`${mountElementId}`).innerHTML = temp(data);\n};\n\nconst renderAll = () => {\n  render('#root')('#myAnswerTmpl')(defaultAnswer());\n  render('#chessboard')('#chessBoardTmpl')(defaultChessBoardData);\n};\n\n// user interaction\nconst goAnswer = () => {\n  // user input check\n  let userInput = document.querySelector('#player').value.toLowerCase();\n  if (!userInput) {\n    render('#root')('#myAnswerTmpl')(defaultAnswer({ err: 'you might missed a role!' }));\n    return;\n  };\n  if (!~role.join('').indexOf(userInput)) {\n    render('#root')('#myAnswerTmpl')(defaultAnswer({ err: 'role must be \"x\" or \"o\"' }));\n    return;\n  }\n\n  // then go for the answer\n  let res = winnerAlgorithm(userInput, defaultChessBoardData);\n  render('#root')('#myAnswerTmpl')(defaultAnswer(res));\n};\n\n/**\r\n* core algorithm\r\n*\r\n*/\nconst winnerAlgorithm = (role, data) => {\n  let rolesLineStrArr = [],\n      response = [],\n      cacheKey = data.reduce((pre, curr) => {\n    return pre += curr.join('');\n  }, `${role}`);\n  // if cached\n  if (cache[cacheKey]) {\n    return cache[cacheKey];\n  }\n  // if no cache\n  data.reduce((pre, curr, index, arr) => {\n    rolesLineStrArr.push({ rows: index, data: curr.join('') }); // rows\n    for (let i = 0; i < 3; i++) {\n      // cols\n      pre = pre + arr[i][index];\n      if (i == 2) {\n        rolesLineStrArr.push({ cols: index, data: pre });\n        return pre = '';\n      };\n    }\n    return pre;\n  }, '');\n  // slash\n  rolesLineStrArr.push({ slash: 0, data: `${data[0][0]}${data[1][1]}${data[2][2]}` });\n  rolesLineStrArr.push({ slash: 1, data: `${data[0][2]}${data[1][1]}${data[2][0]}` });\n  // some check\n  if (rolesLineStrArr.length >>> 0 !== 8) return { err: 'something bad happend!' };\n  if (checkIfYouHaveWon(rolesLineStrArr)) return { count: 0, role };\n  // get the answer\n  for (let i = 0, item; item = rolesLineStrArr[i++];) {\n    const condition = [`${role}e${role}`, `e${role}${role}`, `${role}${role}e`];\n    if (!!~condition.indexOf(item.data)) {\n      let resIndexOne = item.data.indexOf('e');\n      if (item.hasOwnProperty('rows')) {\n        response.push(`[${item.rows}, ${resIndexOne}]`);\n      } else if (item.hasOwnProperty('cols')) {\n        response.push(`[${resIndexOne}, ${item.cols}]`);\n      } else if (item.hasOwnProperty('slash')) {\n        let ar = item.slash === 0 ? `[${resIndexOne}, ${resIndexOne}]` : `[${resIndexOne}, ${2 - resIndexOne}]`;\n        response.push(ar);\n      }\n    }\n  }\n  if (response.length === 0) {\n    return { count: -1, role };\n  }\n  // remove duplication\n  // cache and return\n  return cache[cacheKey] = {\n    count: [...new Set(response)].length,\n    answer: [...new Set(response)]\n  };\n};\n\nconst checkIfYouHaveWon = arr => {\n  let _arr = [];\n  arr.forEach(item => {\n    _arr.push(item.data);\n  });\n  let bool = !!~_arr.indexOf('xxx') || !!~_arr.indexOf('ooo');\n  return bool;\n};\n\n// shuffle the chess board\nconst shuffle = () => {\n  defaultChessBoardData = [[(0, _sample2.default)(all), (0, _sample2.default)(all), (0, _sample2.default)(all)], [(0, _sample2.default)(all), (0, _sample2.default)(all), (0, _sample2.default)(all)], [(0, _sample2.default)(all), (0, _sample2.default)(all), (0, _sample2.default)(all)]];\n  render('#chessboard')('#chessBoardTmpl')(defaultChessBoardData);\n};\n\nrenderAll();\n\n// domlisten\ndocument.querySelector('.btn1').addEventListener('click', shuffle, false);\ndocument.querySelector('.btn2').addEventListener('click', goAnswer, false);"},"hash":"d7109255caa26dd92c1b4948519c88a3"}