{"dependencies":[{"name":"lodash","loc":{"line":9,"column":14}}],"generated":{"js":"\"use strict\";\n\nvar _lodash = require(\"lodash\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst all = ['x', 'o', 'e']; /*\r\n                             * @Author: huangteng\r\n                             * @Date:   2018-04-20 17:18:17\r\n                             * @Last Modified by:   huangteng\r\n                             * @Last Modified time: 2018-04-20 17:54:41\r\n                             * @Description: performance tool\r\n                             */\n\nlet perfs = [];\nlet cache = {};\n\nconst winnerAlgorithm = (role, data) => {\n  let rolesLineStrArr = [],\n      response = [],\n      cacheKey = data.reduce((pre, curr) => {\n    return pre += curr.join('');\n  }, `${role}`);\n  // if cached\n  if (cache[cacheKey]) {\n    return cache[cacheKey];\n  }\n  // if no cache\n  data.reduce((pre, curr, index, arr) => {\n    rolesLineStrArr.push({ rows: index, data: curr.join('') }); // rows\n    for (let i = 0; i < 3; i++) {\n      // cols\n      pre = pre + arr[i][index];\n      if (i == 2) {\n        rolesLineStrArr.push({ cols: index, data: pre });\n        return pre = '';\n      };\n    }\n    return pre;\n  }, '');\n  // slash\n  rolesLineStrArr.push({ slash: 0, data: `${data[0][0]}${data[1][1]}${data[2][2]}` });\n  rolesLineStrArr.push({ slash: 1, data: `${data[0][2]}${data[1][1]}${data[2][0]}` });\n  // some check\n  if (rolesLineStrArr.length >>> 0 !== 8) return { err: 'something bad happend!' };\n  // if(checkIfYouHaveWon(rolesLineStrArr)) return {count: 0, role};\n  // get the answer\n  for (let i = 0, item; item = rolesLineStrArr[i++];) {\n    const condition = [`${role}e${role}`, `e${role}${role}`, `${role}${role}e`];\n    if (!!~condition.indexOf(item.data)) {\n      let resIndexOne = item.data.indexOf('e');\n      if (item.hasOwnProperty('rows')) {\n        response.push(`[${item.rows}, ${resIndexOne}]`);\n      } else if (item.hasOwnProperty('cols')) {\n        response.push(`[${resIndexOne}, ${item.cols}]`);\n      } else if (item.hasOwnProperty('slash')) {\n        let ar = item.slash === 0 ? `[${resIndexOne}, ${resIndexOne}]` : `[${resIndexOne}, ${2 - resIndexOne}]`;\n        response.push(ar);\n      }\n    }\n  }\n  if (response.length === 0) {\n    return { count: -1, role };\n  }\n  // remove duplication\n  // cache and return\n  return cache[cacheKey] = {\n    count: [...new Set(response)].length,\n    answer: [...new Set(response)]\n  };\n};\n\nconst now = () => window.performance.now();\nconst mockData = () => {\n  let data = [[_lodash2.default.sample(all), _lodash2.default.sample(all), _lodash2.default.sample(all)], [_lodash2.default.sample(all), _lodash2.default.sample(all), _lodash2.default.sample(all)], [_lodash2.default.sample(all), _lodash2.default.sample(all), _lodash2.default.sample(all)]];\n\n  let role = _lodash2.default.sample(all);\n\n  return {\n    data,\n    role\n  };\n};\nconst test = () => {\n  let { role, data } = mockData();\n  let start = now();\n  let res = winnerAlgorithm(role, data);\n  let end = now();\n  perfs.push(end - start);\n};\n\nfor (let i = 0; i < 10000; i++) {\n  test();\n}\n\nconst draw = data => {\n  let myChart = echarts.init(document.querySelector('#charts'));\n  myChart.setOption({\n    xAxis: {\n      type: 'category',\n      data: perfs\n    },\n    yAxis: {\n      type: 'value',\n      name: '运行时间(ms)'\n    },\n    series: [{\n      data: perfs,\n      type: 'line',\n      smooth: true\n    }]\n  });\n};\n\ndraw(perfs);"},"hash":"d3daf454cb3223f30c75ce3f993d0204"}